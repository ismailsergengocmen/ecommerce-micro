spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=hero10000
spring.jpa.hibernate.ddl-auto=update

server.port=8081
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service
eureka.instance.instanceId=${spring.application.name}:${random.value}
eureka.instance.prefer-ip-address=true

#? Circuit breaker endpoints in actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

## Resilience4j Properties

#? To see the different stated of circuit breaker => Closed, Open, Half-Open
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

#? Circuit breaker will not change its state from closed to open right away when an event fails
#? Instead, it will wait for some number of requests to fail. Sliding window algorithm is used
#? to determine when the circuit breaker should be open
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

#? And if the fail rate threshold pass %50, it will turn to open state and wait 5s in that state
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

#? Number of allowed calls in the half open state. In this state, circuit breaker checks whether the
#? communication between our services is working fine with 3 calls
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

## Resilience4j Timeout Properties (Use case => Slow network connection)
#? Circuit breaker will wait 3s before terminating any call
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

# Resilience4j Retry Properties
#? If we do not receive a response in 5 seconds we will do a retry for 3 times
#? And if the retries still not working, then we let the circuit breaker
#? to handle the actual request flow
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

## Zipkin Properties
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=1.0